{"version":3,"sources":["constants/action-types.js","reducers/index.js","validation/index.js","actions/index.js","components/login.jsx","components/dashboard.jsx","App.js","serviceWorker.js","index.js"],"names":["HANDLE_LOGIN","SAVE_SEARCH_PLANNET","SAVE_PLANNET_DETAILS","initialState","login_data","username","isUserLoggedIn","plannet_data","loader","count","plannet_arr","errorMessage","plannet_details","detail","rootReducer","state","arguments","length","undefined","action","type","Object","assign","payload","validatation","validate","fields","field","rules","i","value","checkValidation","this","capitalizeFirstLetter","string","charAt","toUpperCase","slice","isEmpty","field_info","replace","fieldname","isEmail","test","String","toLowerCase","isPhone","isName","isPostalcode","RegExp","handleLogin","saveSearchPlannet","savePlannetDetails","Login","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleLoginUser","bind","assertThisInitialized","updateTextFieldValue","loading","password","API_URL","window","e","setState","defineProperty","target","name","event","_this2","preventDefault","result","apiURL","fetch","method","headers","Headers","content-type","Accept","then","res","json","results","birth_year","localStorage","setItem","props","dispatch","history","push","catch","err","react_default","a","createElement","style","width","className","src","onSubmit","placeholder","onChange","renderSubmit","Component","connect","withRouter","Dashboard","plannetKey","self","totalPopulation","listArr","popAvg","map","item","isNaN","parseInt","population","index","toFixed","onClick","plannetDetail","url","key","href","_this3","searchStr","rotation_period","orbital_period","diameter","climate","_this4","console","log","Fragment","data-toggle","data-target","id","role","aria-haspopup","aria-expanded","aria-hidden","aria-labelledby","fontSize","fontWeight","handle_logout","margin","renderPlannet","renderPlannetDetail","clear","location","reload","store","createStore","App","es","react_router_dom","basename","react_router","exact","path","render","dashboard","components_login","React","Boolean","hostname","match","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.19609a0c.chunk.js","sourcesContent":["export const HANDLE_LOGIN = \"HANDLE_LOGIN\";\r\nexport const SAVE_SEARCH_PLANNET = \"SAVE_SEARCH_PLANNET\";\r\nexport const SAVE_PLANNET_DETAILS = \"SAVE_PLANNET_DETAILS\";\r\n","import { HANDLE_LOGIN,SAVE_SEARCH_PLANNET,SAVE_PLANNET_DETAILS } from \"../constants/action-types\";\r\nconst initialState = {\r\n  login_data: {\r\n      username:'',\r\n      isUserLoggedIn:false\r\n  },\r\n  plannet_data:{\r\n      loader:false,\r\n      count: 0, \r\n      plannet_arr:[],\r\n      errorMessage:''\r\n  },\r\n  plannet_details:{\r\n    loader:false,\r\n    detail:{},\r\n    errorMessage:''\r\n}\r\n};\r\nfunction rootReducer(state = initialState, action) {\r\n  let newState = '';\r\n  if (action.type === HANDLE_LOGIN) {\r\n    newState = Object.assign({},state,{login_data: action.payload});\r\n    return newState;  \r\n  }\r\n  else if(action.type === SAVE_SEARCH_PLANNET){\r\n    newState = Object.assign({},state,{plannet_data: action.payload});\r\n    return newState; \r\n  }\r\n  else if(action.type === SAVE_PLANNET_DETAILS){\r\n    newState = Object.assign({},state,{plannet_details: action.payload});\r\n    return newState; \r\n  }\r\n  return state;\r\n}\r\nexport default rootReducer;","const validatation = {\r\n  validate: function(fields) {\r\n    if (!fields) return true;\r\n    for (var field in fields) {\r\n      var rules = fields[field].rules;\r\n      var value = fields[field].value;\r\n      for (var i = 0; i < rules.length; i++) {\r\n        var funName = 'is'+this.capitalizeFirstLetter(rules[i]);\r\n        var checkValidation = this[funName](fields[field]);\r\n        if(checkValidation) {\r\n          return checkValidation;\r\n        }\r\n      }\r\n    }\r\n  },\r\n  capitalizeFirstLetter: function(string) {\r\n    return string.charAt(0).toUpperCase() + string.slice(1);\r\n  },\r\n  isEmpty: function (field_info) {\r\n    var value = field_info.value.replace(/\\s+/g, '');\r\n    return (value) ? false: field_info.fieldname+ ' is required';\r\n  },\r\n  isEmail: function (field_info) {\r\n    var value = field_info.value.replace(/\\s+/g, '');\r\n    var re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n    return (re.test(String(value).toLowerCase())) ? false: field_info.fieldname+ ' is not valid';\r\n  },\r\n  isPhone: function(field_info) {\r\n    var value = field_info.value.replace(/\\s+/g, '');\r\n    if (!value) return false;\r\n    var re = /^(\\([0-9]{3}\\) |[0-9]{3}-)[0-9]{3}-[0-9]{4}$/;\r\n    return (re.test(field_info.value)) ? false: field_info.fieldname+ ' is not valid';\r\n  },\r\n  isName: function(field_info) {\r\n    var value = field_info.value.replace(/\\s+/g, '');\r\n    if (!value) return false;\r\n    var re = /[^a-zA-Z0-9]/;\r\n    return (re.test(field_info.value)) ? false: field_info.fieldname+ ' is not valid';\r\n  },\r\n  isPostalcode: function(field_info) {\r\n    var regex = new RegExp(/^\\d{6}$/);    \r\n    return (regex.test(field_info.value)) ? false: field_info.fieldname+ ' is not valid';\r\n  }\r\n}\r\n export default validatation;\r\n","import { HANDLE_LOGIN,SAVE_SEARCH_PLANNET,SAVE_PLANNET_DETAILS } from \"../constants/action-types\";\r\nexport function handleLogin(payload) {\r\n  return { type: HANDLE_LOGIN, payload };\r\n}\r\nexport function saveSearchPlannet(payload) {\r\n    return { type: SAVE_SEARCH_PLANNET, payload };\r\n}\r\nexport function savePlannetDetails(payload) {\r\n    return { type: SAVE_PLANNET_DETAILS, payload };\r\n}","import React, { Component } from 'react';\nimport './login.css';\nimport { connect } from 'react-redux';\nimport validatation from '../validation/';\nimport { withRouter } from 'react-router';\nimport { handleLogin } from \"../actions/index\";\n\nclass Login extends Component {\n  constructor() {\n    super();\n    this.handleLoginUser = this.handleLoginUser.bind(this);\n    this.updateTextFieldValue = this.updateTextFieldValue.bind(this);\n    this.state = {\n        loading: false,\n        username: '',\n        password: '',\n        errorMessage: '',\n        API_URL:window.API_URL,\n      };\n  }\n  updateTextFieldValue(e) {\n    this.setState({\n        [e.target.name]: e.target.value\n    });\n  }\n  handleLoginUser(event) {\n\t  event.preventDefault();\n\t  const self = this;\n\t  this.setState({\n\t\t  errorMessage: ''\n\t  });\n\t\tvar result = validatation.validate({\n\t\t  username: {rules: ['empty'], value: this.state.username, fieldname: 'User Name'},\n\t\t  password: {rules: ['empty'], value: this.state.password, fieldname: 'Password'}\n\t\t});\n\t\tif(result) {\n\t\t  this.setState({\n\t\t\terrorMessage: result\n\t\t  });\n\t\t}\n\t\telse {\n      this.setState({\n        errorMessage: result,\n        loading: true\n      });\n        let apiURL = this.state.API_URL+'people/?search='+this.state.username;\n        fetch(apiURL, {\n         method: 'GET',\n         headers: new Headers({\n         'content-type': 'application/json; charset=utf-8',\n         'Accept': 'application/json, application/xml, text/plain, text/html, *.*'\n         }),\n       })\n       .then((res) => res.json())\n       .then((res) => {\n        \n        if(res.count==1 && this.state.password.toUpperCase()==res.results[0].birth_year){\n          localStorage.setItem('isUserLoggedIn', true);\n          localStorage.setItem('name', res.results[0].name);\n          this.setState({\n            loading: false\n          });\n          this.props.dispatch( handleLogin({ isUserLoggedIn: true, username: res.results[0].name }) )\n          this.props.history.push(\"/dashboard\");\n         }\n         else{\n          this.setState({\n            errorMessage: \"Please enter correct username and password\",\n            loading: false\n          });\n          this.props.dispatch( handleLogin({ isUserLoggedIn: false, username: '' }) )\n         }\n       })\n       .catch((err)=>{\n         this.setState({\n           errorMessage:err,\n           loading: false\n         });\n       });\n    }\n  }\n  renderSubmit(){\n    if(this.state.loading){\n      return(\n        <button type=\"button\" style={{width:'100%'}} className=\"btn btn-lg btn-primary\">\n          <i className=\"fa fa-spinner fa-spin\"></i> Loading, please wait\n        </button>\n      )\n    }\n    else{\n      return(\n        <button type=\"submit\" style={{width:'100%'}} className=\"btn btn-lg btn-primary\">\n          Login to access\n        </button>\n      )\n    }\n  }\n  render() {\n    return (\n      <div className=\"login-wrapper\">\n        <div className=\"login-container\">\n\n            <div className=\"left-section\">\n                <img src=\"images/login-logo.png\" />\n            </div>\n            <div className=\"right-section\">\n              <form onSubmit={this.handleLoginUser}>\n                <div className=\"form-wrapper\">\n                <div className=\"login-title\">Login</div>\n                <div className=\"form-block\">\n                {this.state.errorMessage ? <div className=\"text text-danger\">{this.state.errorMessage}</div>: ''}\n                    <div className=\"login-block\">\n                        <label>User name</label>\n                        <input type=\"text\" name=\"username\" placeholder=\"Enter user name\" onChange={this.updateTextFieldValue}/>\n                    </div>\n                    <div className=\"login-block\">\n                        <label>Password</label>\n                        <input type=\"password\" name=\"password\" placeholder=\"Enter your password\" onChange={this.updateTextFieldValue}/>\n                    </div>\n                   <div className=\"form-action\">\n                     {this.renderSubmit()}\n                     \n\n                  </div>\n                   <div className=\"poweredby\">&nbsp;</div>\n                </div>\n              </div>\n              </form>\n       </div>\n   </div>\n   </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n\treturn{login_data:state.login_data};\n}\nexport default connect(mapStateToProps)(withRouter(Login));\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { withRouter } from 'react-router';\r\nimport { saveSearchPlannet,savePlannetDetails } from \"../actions/index\";\r\n\r\nclass Dashboard extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.updateTextFieldValue = this.updateTextFieldValue.bind(this);\r\n    }\r\n    plannetDetail(plannetKey){\r\n        if(plannetKey){\r\n            this.props.dispatch( savePlannetDetails({ loader: true }) )\r\n            fetch(plannetKey, {\r\n                method: 'GET',\r\n                headers: new Headers({\r\n                'content-type': 'application/json; charset=utf-8',\r\n                'Accept': 'application/json, application/xml, text/plain, text/html, *.*'\r\n                }),\r\n            })\r\n            .then((res) => res.json())\r\n            .then((res) => {\r\n                if(res.name){\r\n                    this.props.dispatch( savePlannetDetails(\r\n                        { \r\n                            loader: false,\r\n                            detail: res, \r\n                            errorMessage:'' \r\n                        }\r\n                        ) );\r\n                }\r\n                else{\r\n                    this.props.dispatch( savePlannetDetails(\r\n                        { \r\n                            loader: false, \r\n                            detail: res, \r\n                            errorMessage:'Opps plannet detail not found!' \r\n                        }\r\n                        ) );\r\n                }\r\n            })\r\n            .catch((err)=>{\r\n                this.props.dispatch( savePlannetDetails({ loader: false, detail: {}, errorMessage:err   }) );\r\n              });\r\n        }\r\n    }\r\n    renderPlannet(){\r\n        if(this.props.plannet_data.count>0){\r\n            let self = this;\r\n            let plannet_arr = this.props.plannet_data.plannet_arr; \r\n            let totalPopulation = 0;\r\n            let listArr = [];\r\n            let popAvg = 0;\r\n            plannet_arr.map((item) => {\r\n                if( !isNaN(parseInt(item.population))){\r\n                    totalPopulation += parseInt(item.population);\r\n                }\r\n            });\r\n            plannet_arr.map((item,index) => {\r\n\r\n                if( !isNaN(parseInt(item.population))){\r\n                    popAvg = (parseInt(item.population)/totalPopulation*100).toFixed(1);\r\n                }\r\n                else{\r\n                    popAvg = 'NA';\r\n                }\r\n                listArr.push(\r\n                    <li onClick={() => self.plannetDetail(item.url)} key={index}><a href=\"javascript:void(0)\">{item.name}<span>{popAvg}</span></a></li>\r\n                )\r\n            });\r\n            return(\r\n                <div className=\"tagcloud03\">\r\n                    <ul>\r\n                        {listArr}\r\n                    </ul>\r\n                </div>\r\n            )\r\n        }\r\n\r\n        \r\n    }\r\n    updateTextFieldValue(e){\r\n        let searchStr = e.target.value;\r\n        if(searchStr!=''){\r\n            this.props.dispatch( saveSearchPlannet({ loader: true }) )\r\n            let apiURL = window.API_URL+'planets/?search='+searchStr;\r\n            fetch(apiURL, {\r\n                method: 'GET',\r\n                headers: new Headers({\r\n                'content-type': 'application/json; charset=utf-8',\r\n                'Accept': 'application/json, application/xml, text/plain, text/html, *.*'\r\n                }),\r\n            })\r\n            .then((res) => res.json())\r\n            .then((res) => {\r\n                if(res.count>0){\r\n                    this.props.dispatch( saveSearchPlannet(\r\n                        { \r\n                            loader: false,\r\n                            count: res.count, \r\n                            plannet_arr: res.results, \r\n                            errorMessage:'' \r\n                        }\r\n                        ) );\r\n                }\r\n                else{\r\n                    this.props.dispatch( saveSearchPlannet(\r\n                        { \r\n                            loader: false, \r\n                            count: 0, \r\n                            plannet_arr: [], \r\n                            errorMessage:'Opps no plannet found!' \r\n                        }\r\n                        ) );\r\n                }\r\n            })\r\n            .catch((err)=>{\r\n                this.props.dispatch( saveSearchPlannet({ loader: false, plannet_arr: [], errorMessage:err, count: 0,  }) );\r\n              });\r\n        }\r\n        else{\r\n            this.props.dispatch( saveSearchPlannet({ loader: false, plannet_arr: [],errorMessage:'',count: 0,  }) );\r\n            this.props.dispatch( savePlannetDetails({ loader: false, detail: {}, errorMessage:''   }) );\r\n        }\r\n    }\r\n    renderPlannetDetail(){\r\n        if(this.props.plannet_details.detail){\r\n            return(\r\n                <div className=\"col-lg-12\">\r\n                    <div className=\"col-lg-2\">\r\n                        <strong>Name </strong>\r\n                        {this.props.plannet_details.detail.name}\r\n                    </div>\r\n                    <div className=\"col-lg-2\">\r\n                        <strong>Rotation Period </strong>\r\n                        {this.props.plannet_details.detail.rotation_period}\r\n                    </div>\r\n                    <div className=\"col-lg-2\">\r\n                        <strong>Orbital Period </strong>\r\n                        {this.props.plannet_details.detail.orbital_period}\r\n                    </div>\r\n                    <div className=\"col-lg-2\">\r\n                        <strong>Diameter </strong>\r\n                        {this.props.plannet_details.detail.diameter}\r\n                    </div>\r\n                    <div className=\"col-lg-2\">\r\n                        <strong>Climate </strong>\r\n                        {this.props.plannet_details.detail.climate}\r\n                    </div>\r\n                    <div className=\"col-lg-2\">\r\n                        <strong>Population </strong>\r\n                        {this.props.plannet_details.detail.population}\r\n                    </div>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n    render(){console.log(this.props);\r\n       return(\r\n        <>\r\n            <nav className=\"navbar navbar-default navbar-fixed-top\">\r\n                <div className=\"container\">\r\n                    <div className=\"navbar-header page-scroll\">\r\n                        <button type=\"button\" className=\"navbar-toggle\" data-toggle=\"collapse\" data-target=\"#bs-example-navbar-collapse-1\">\r\n                            <span className=\"sr-only\">Toggle navigation</span>\r\n                            <span className=\"icon-bar\"></span>\r\n                            <span className=\"icon-bar\"></span>\r\n                            <span className=\"icon-bar\"></span>\r\n                        </button>\r\n                        <a className=\"navbar-brand\" href=\"#page-top\">Star Wars Plannets</a>\r\n                    </div>\r\n                    <div className=\"collapse navbar-collapse\" id=\"bs-example-navbar-collapse-1\">\r\n                        <ul className=\"nav navbar-nav navbar-right\">\r\n                                <li className=\"nav-item dropdown\">\r\n                                <a className=\"nav-link dropdown-toggle\" href=\"#\" id=\"navbarDropdown\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n                                Welcome, {localStorage['name']}&nbsp;<i className=\"fa fa-caret-down\" aria-hidden=\"true\"></i>\r\n                                </a>\r\n                                <div className=\"dropdown-menu\" aria-labelledby=\"navbarDropdown\" style={{\r\n                                    width: '100%',\r\n                                    fontSize: '15px',\r\n                                    fontWeight: 'bold'\r\n                                }}>\r\n                                <a className=\"dropdown-item\" href=\"javascript:void(0)\" onClick={()=>this.handle_logout()} style={{margin: '15px'}}>Logout</a>\r\n                                </div>\r\n                            </li>\r\n                        </ul>\r\n                    </div>\r\n                </div>\r\n            </nav>\r\n            <div className=\"content-wrapper\">\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-lg-12 text-center\">\r\n                        <div className=\"form-group\">\r\n                            <input type=\"text\" onChange={this.updateTextFieldValue} name=\"search\" placeholder=\"Search star wars plannet...\" className=\"form-control\" id=\"search\"/>\r\n                        </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-lg-12 text-center\">\r\n                        {this.props.plannet_data.loader &&\r\n                            <small>Loading Data...</small>\r\n                        }\r\n                        {this.props.plannet_data.errorMessage &&\r\n                            <small>{this.props.plannet_data.errorMessage}</small>\r\n                        }\r\n                        </div>\r\n                        <div className=\"col-lg-12\">\r\n                            {this.renderPlannet()}\r\n                        </div>\r\n                        <div className=\"col-lg-12 text-center\">\r\n                            {this.props.plannet_details.loader &&\r\n                                <small>Loading Detail Data...</small>\r\n                            }\r\n                            {this.props.plannet_details.errorMessage &&\r\n                                <small>{this.props.plannet_details.errorMessage}</small>\r\n                            }\r\n                        </div>\r\n                        {this.renderPlannetDetail()}\r\n                    </div>\r\n                </div>\r\n            </div>                    \r\n        </>\r\n      \r\n       )\r\n    }\r\n    handle_logout(){\r\n        localStorage.clear();\r\n        window.location.reload(true);\r\n    }\r\n}\r\nconst mapStateToProps = (state) => {\r\n\treturn{ \r\n        plannet_data:state.plannet_data,\r\n        plannet_details:state.plannet_details\r\n    };\r\n}\r\nexport default connect(mapStateToProps)(withRouter(Dashboard));\r\n","import React from 'react';\nimport {\n  BrowserRouter,\n  Route, Redirect, Switch\n} from 'react-router-dom';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport rootReducer from \"./reducers\";\nimport Login from './components/login.jsx';\nimport Dashboard from './components/dashboard.jsx';\n\nlet store = createStore(rootReducer);\n\nclass App extends React.Component {\n  render() {\n    return (\n      <Provider store={store}>\n          <BrowserRouter basename=\"/xebia-test/\">\n                <Switch>\n                  <Route exact path=\"/\" render={() => {\n                    if (this.isUserLoggedIn()) {\n                      return <Dashboard />;\n                    }\n                    return <Login />;\n                  }} \n                  />\n                  <Route exact path=\"/dashboard\" render={() => {\n                    if (this.isUserLoggedIn()) {\n                      return <Dashboard />;\n                    }\n                    return <Login />;\n                  }}  \n                  />\n                </Switch>\n        </BrowserRouter>\n        </Provider>\n    );\n  }\n  isUserLoggedIn() {\n    const userDetail = localStorage['isUserLoggedIn'];\n    if(userDetail) {\n      return true;\n    }\n    return false;\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}